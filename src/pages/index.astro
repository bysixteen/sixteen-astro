---
import Layout from '../layouts/Layout.astro';
import '../styles/main.css';
---
<Layout>
  <div class="grid grid-cols-12 gap-6 px-grid">
    <div class="px-6 w-full mx-auto">
      <canvas id="project-slider" class="fixed top-0 left-0 w-screen h-screen z-10 pointer-events-auto"></canvas>
      <main id="content-holder" role="main" tabindex="-1">
        <div id="project-data" style="display:none;">
          <!-- Project data will be populated by JavaScript -->
        </div>
      </main>
    </div>
  </div>
  <script src="/scripts/gallery.js" is:inline></script>
  <script>
    // Strapi configuration
    const STRAPI_URL = import.meta.env.PUBLIC_STRAPI_URL;
    
    async function loadWorks() {
      try {
        if (!STRAPI_URL) {
          throw new Error('Strapi URL is not configured');
        }
        
        // Fetch from Strapi
        const worksRes = await fetch(STRAPI_URL + '/works?populate=*');
        
        if (!worksRes.ok) {
          throw new Error(`Failed to fetch from Strapi: ${worksRes.status} ${worksRes.statusText}`);
        }
        
        const response = await worksRes.json();
        const works = response.data || [];
        
        // Populate project data
        const projectData = document.getElementById('project-data');
        if (projectData) {
          projectData.innerHTML = works.map((item: any) => {
            const a = item.attributes ?? item;
            const client = a.Client;
            const slug = a.Slug;
            let imgUrl = "/video-placeholder.png"; // fallback
            if (a.ThumbImage?.data?.attributes?.url) {
              // If it's a relative URL, prepend the Strapi base URL
              if (a.ThumbImage.data.attributes.url.startsWith('/')) {
                const strapiBase = STRAPI_URL.replace('/api', '');
                imgUrl = strapiBase + a.ThumbImage.data.attributes.url;
              } else {
                imgUrl = a.ThumbImage.data.attributes.url;
              }
            }
            
            return `<div 
              class="project-item"
              data-title="${client}"
              data-category="${a.Type ?? '—'}"
              data-image="${imgUrl}"
              data-url="/works/${slug}"
              style="display: none;"
            >
              ${client} - ${a.Type ?? '—'}
            </div>`;
          }).join('');
          
          // Set global flag and dispatch custom event
          window.projectDataReady = true;
          window.dispatchEvent(new CustomEvent('projectData:ready', { detail: { count: works.length } }));
        }
      } catch (error) {
        // Fallback to sample data if Strapi is unavailable
        const projectData = document.getElementById('project-data');
        if (projectData) {
          const fallbackWorks = [
            {
              Client: 'Careem',
              Type: 'App',
              Slug: 'careem',
              ThumbImage: { data: { attributes: { url: '/careem-thumb.png' } } }
            },
            {
              Client: 'DAZN',
              Type: 'Digital Design',
              Slug: 'dazn',
              ThumbImage: { data: { attributes: { url: '/video-placeholder.png' } } }
            },
            {
              Client: 'Forevermark',
              Type: 'Brand Campaign',
              Slug: 'forevermark',
              ThumbImage: { data: { attributes: { url: '/video-placeholder.png' } } }
            }
          ];
          
          projectData.innerHTML = fallbackWorks.map((item: any) => {
            const client = item.Client;
            const slug = item.Slug;
            const imgUrl = item.ThumbImage?.data?.attributes?.url || '/video-placeholder.png';
            
            return `<div 
              class="project-item"
              data-title="${client}"
              data-category="${item.Type ?? '—'}"
              data-image="${imgUrl}"
              data-url="/works/${slug}"
              style="display: none;"
            >
              ${client} - ${item.Type ?? '—'}
            </div>`;
          }).join('');
          
          // Set global flag and dispatch custom event
          window.projectDataReady = true;
          window.dispatchEvent(new CustomEvent('projectData:ready', { detail: { count: fallbackWorks.length } }));
        } else {
          // Set global flag even on error to prevent hanging
          window.projectDataReady = true;
          window.dispatchEvent(new CustomEvent('projectData:ready', { detail: { count: 0 } }));
        }
      }
    }
    
    // Load works when page loads
    loadWorks();
  </script>
</Layout> 